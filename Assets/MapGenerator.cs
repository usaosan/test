using UnityEngine;
using System.Collections;

public class MapGenerator : MonoBehaviour {
	
	public GameObject BWall_Prefab;
	private int OuterX_Max = 25;
	private int OuterZ_max = 25;
	public GameObject Wall_Prefab;
	public GameObject Ball_Prefab;
	public GameObject Goal_Prefab;
	public GameObject Txt_State_Prefab;
	public GameObject Txt_Time_Prefab;
	//public GUIText Time_Text;
	//タイマー初期値;
	public int MaxTime = 60;
	//ゲームステータス;
	//public GUIText Txt_State;
	//残り時間;
	private float time_Remaining;
	
	// Use this for initialization
	void Start () 
	{
		//マップマトリクス;
		string Map_Matrix  = "111000000011111112:101000000010000001:101000000010101111:101111011111101001:101001010000001111:101001110000001001:101000000000000001:101000000000011111:101000000000010000:101000000000011111:101000000000000001:101000000011111111:101000000010000001:101110000010000001:100010000010000001:111010111110000001:000010100000000001:311110110000000001";
		//ロードレベル取得;
		int LoadLevel = Application.loadedLevel;
		//ロードレベルで分岐;
		switch (LoadLevel)
		{
			case 1:
				Map_Matrix = "203111011110100111111100:100001110010101001010101:101101010010101001010111:100100110011111110010101:100100010100001011110001:111111010100100000000101:101001001111111111111101:101001000010010010000001:101101000010010010001001:000101000010010010001001:010101000010010010001111:100101111110010010001000:111100000000010010001000:100000000000010011101010:100000000000000000011110:101111000001111111110011:101001000111000000000100:101001000100000000000101:101001000111111111111101:101001000100000000000001:101001000100000000000001:101001111111111111111111:111111000000000000000000:100000000000000000000000";
				break;
			case 2:
				Map_Matrix = "203110111111110111111111:100010101001011100000001:111010101001000000010101:001010001001011110010101:101011111001000011110101:111000000001000010010101:100010000001000010000101:111111111001101110010101:100000001000100100011101:111100001000100111010001:100100101010100101011101:100100101010000001010101:100100101010000000010101:100100101010001111110101:100100101111111000000111:000111100000101001111100:100101001111101000000111:111101000000001111000101:100001111111000101111101:000001010101000101010001:000001010101111101010101:100111010100010001011101:100000011100010001000001:111111110001111111000111";
				break;
			case 3:
				Map_Matrix = "203111011111110111111111:100010101010101010101010:111011111101110111110111:101010101010101010101010:011101010101111111011111:101010101010101010101010:111101111111010101011101:101010101010101010101010:110101110111111111011111:101010101010101010101010:111101111101111111110111:101010101010101010101010:011101111111010101111111:101010101010101010101010:111101011111111111011111:101010101010101010101010:110111110101010111010101:101010101010101010101010:110111111111110111111111:101010101010101010100010:110111011111111101011111:101010101010101010101010:111111011111011111111101:101010101010101010101010";
				break;
		}
		//外枠の作成;
		CreateMap_OuterWall();
		//マップ内部作成;
		CreateMap(Map_Matrix);
		//ステータステキスト生成;
		Instantiate(Txt_State_Prefab);
		//タイム表示生成;
		Instantiate(Txt_Time_Prefab);
	}
	
	// Update is called once per frame
	void Update ()
	{
		
	}
	//外枠の作成メソッド;
	void CreateMap_OuterWall()
	{	
		//
		for(int Outer_X = 0; Outer_X <= OuterX_Max; Outer_X++)
		{
			Instantiate(BWall_Prefab, new Vector3(Outer_X, 0, 0), Quaternion.identity);
			Instantiate(BWall_Prefab, new Vector3(Outer_X, 0, OuterZ_max), Quaternion.identity);
		}
		//	
		for(int Outer_Z = 0; Outer_Z <= OuterZ_max; Outer_Z++)
		{
			Instantiate(BWall_Prefab, new Vector3(0, 0, Outer_Z), Quaternion.identity);
			Instantiate(BWall_Prefab, new Vector3(OuterX_Max, 0, Outer_Z), Quaternion.identity);
		}
		
	}
	//マップ内部作成;
	void CreateMap(string Map_Matrix)
	{
		string[] Map_Matrix_Array = Map_Matrix.Split(':');
		
		for(int x = 0; x < Map_Matrix_Array.Length; x++)
		{
			string x_Map = Map_Matrix_Array[x];
			for(int z = 0; z < x_Map.Length; z++)
			{                    
				int Map_Obj = int.Parse(x_Map.Substring(z, 1));	
				if(Map_Obj == 0)
				{
					Instantiate(Wall_Prefab, new Vector3(x + 1, 0, z  + 1), Quaternion.identity);
				}
				if(Map_Obj == 2)
				{
					Instantiate(Ball_Prefab, new Vector3(x + 1, 0, z  + 1), Quaternion.identity);
				}
				if(Map_Obj == 3)
				{
					Instantiate(Goal_Prefab, new Vector3(x + 1, 0, z  + 1), Quaternion.identity);
				}
			}
		}
		
	}
}
